[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "zfit_physics"
description = "Physics extension to zfit"
readme = "README.rst"
author = "zfit"
author_email = "zfit@physik.uzh.ch"
maintainer = "zfit"
maintainer_email = "zfit@physik.uzh.ch"
license.file = "LICENSE"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Physics",
]
keywords = ["TensorFlow, model, fitting, scalable, HEP, physics"]

requires-python = ">=3.9"

dependencies = ["zfit>=0.20"]
dynamic = ["version"]

[project.optional-dependencies]

tfpwa = ["tfpwa@git+https://github.com/jiangyi15/tf-pwa"]
compwa = [
    "qrules",
    "ampform",
    "tensorwaves[phsp]",
]

all = ["zfit-physics[tfpwa,compwa]"]
test = [
    "pytest",
    "pytest-cov",
    "pytest-rerunfailures",
    "pytest-xdist",
    "zfit-physics[all]",
    "contextlib_chdir",  # backport of chdir from Python 3.11
]




dev = [
    "bumpversion>=0.5.3",
    "coverage>=4.5.1",
    "flake8>=3.5.0",
    "jupyter-sphinx",
    "myst-nb",
    "numba-stats",
    "pip>=9.0.1",
    "pre-commit",
    "pydata-sphinx-theme>=0.9", # new dark theme configuration
    "pyyaml",
    "seed_intersphinx_mapping",
    "setupext-janitor",
    "Sphinx>=3.5.4",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-panels",
    "sphinx_togglebutton",
    "sphinxcontrib-applehelp<1.0.8", # needs sphinx>=0.5, why are we still stuck at <0.5?
    "sphinxcontrib-images",
    "sphinxcontrib-youtube>=1.0.0,<1.2.0",
    "tox>=2.9.1",
    "twine>=1.10.0",
    "watchdog>=0.8.3",
    "wheel>=0.29.0",
    "zfit-physics[test]",
]

[project.urls]
Documentation = "https://zfit-physics.readthedocs.io/en/latest/"
Repository = "https://github.com/zfit/zfit-physics"
"Bug Tracker" = "https://github.com/zfit/zfit-physics/issues"
Discussions = "https://github.com/zfit/zfit-physics/discussions"
Changelog = "https://github.com/zfit/zfit-physics/blob/main/CHANGELOG.rst"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/zfit_physics/_version.py"
metadata.allow-direct-references = true


[tool.pytest.ini_options]
minversion = "6.0"
#addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
#xfail_strict = true
#filterwarnings = [
#    "error",
#]
log_cli_level = "INFO"
testpaths = [
    "tests",
]

[tool.coverage]
run.source = ["zfit_physics"]
report.exclude_also = [
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "zfit_pwa.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
src = ["src"]
line-length = 120
exclude = [
    ".tox/*",
    "*/test*",
    "*/__init__.py",
    "*/_version.py",
]
[tool.ruff.lint]
extend-select = [
    "B", # flake8-bugbear
    "I", # isort
    "ARG", # flake8-unused-arguments
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD", # pandas-vet
]
ignore = [
    "UP007", # type annotation upgrade, breaks pydantic for Python 3.9 (remove once above)
    "PLR09", # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001", # Conflicts with formatter
    "RET505", # This is sometimes wanted, protets against accidental intendation
    "PD901", # "avoid using `df[...].values`" -> no, this is a very good name if there is only one df
    "PD011", # "replace `df[...].values` with `df[...].to_numpy()`" -> not yet, it's not deprecated.
    # Prefer to have a single way to access the data if we don't care about whether it's a numpy array or not.
    "PLW0603", # updating global variables with a function is bad, but we use it for
    "PLW2901", # "for loop overwritten by assignment" -> we use this to update the loop variable
    "PD013", # "melt over stack": df function, but triggers on tensors
    "NPY002", # "Use rnd generator in numpy" -> we use np.random for some legacy stuff but do use the new one where we can

]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "missing-module-docstring",
    "wrong-import-position",
]
